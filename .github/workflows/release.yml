name: Create Release with install.bat

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            patch=$((patch+1))
            new_tag="v$major.$minor.$patch"
          else
            new_tag="v1.0.0"
          fi
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Create new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.get_tag.outputs.new_tag }}
          git push origin ${{ steps.get_tag.outputs.new_tag }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:
          tag_name: ${{ steps.get_tag.outputs.new_tag }}
          release_name: Release ${{ steps.get_tag.outputs.new_tag }}
          draft: false
          prerelease: false

      - name: Upload install.bat
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./install.bat
          asset_name: install.bat
          asset_content_type: application/octet-stream

      - name: Download lean.zip and full.zip from Repo A latest release
        run: |
          GH_API="https://api.github.com"
          SOURCE_OWNER="Emag-SU"
          SOURCE_REPO="EmagSU_Monitoring"

          mkdir -p downloads

          # Get latest release info
          release=$(curl -s -H "Authorization: token ${{ secrets.SRC_REPO }}" \
            "$GH_API/repos/$SOURCE_OWNER/$SOURCE_REPO/releases/latest")

          assets_url=$(echo "$release" | jq -r .assets_url)

          # Get asset download URLs
          asset_urls=$(curl -s -H "Authorization: token ${{ secrets.SRC_REPO }}" "$assets_url" | jq -r '.[] | {name, url} | @base64')

          for asset in $asset_urls; do
            _jq() {
              echo "${asset}" | base64 --decode | jq -r "${1}"
            }

            name=$(_jq '.name')
            url=$(_jq '.url')

            if [[ "$name" == "lean.zip" || "$name" == "full.zip" ]]; then
              echo "Downloading $name..."
              curl -L -H "Authorization: token ${{ secrets.SRC_REPO }}" \
                  -H "Accept: application/octet-stream" \
                  "$url" -o "downloads/$name"
            fi
          done

      - name: Upload lean.zip (from Repo A)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/lean.zip
          asset_name: lean.zip
          asset_content_type: application/zip

      - name: Upload full.zip (from Repo A)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/full.zip
          asset_name: full.zip
          asset_content_type: application/zip
